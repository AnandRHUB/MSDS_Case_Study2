gg3 <- ggplot(dfTrain,aes(Attrition,MonthlyIncome, fill=Attrition, color=Attrition))+
geom_box()+
labs(subtitle="Attrition and Monthly Income",
y="Attrition",
x="MonthlyIncome",
title="Violin")
gg5 <- ggplot(dfTrain, aes(x=dfTrain$MonthlyIncome, y=dfTrain$JobLevel, color = Attrition)) +
geom_point() +
labs(subtitle="Monthly Income and Joblevel",
y="JobLevel",
x="Monthly Income",
title="Scatterplot")
plot(gg4)
gg5 <- ggplot(dfTrain, aes(x=dfTrain$Overtime, y=dfTrain$JobLevel, color = Attrition)) +
geom_point() +
labs(subtitle="Monthly Income and Joblevel",
y="JobLevel",
x="Overtime",
title="Scatterplot")
plot(gg5)
#boxplot between monthly income and attrition
ggplot(data,aes(Attrition,YearsSinceLastPromotion,fill=Attrition))+geom_violin()
#boxplot between monthly income and attrition
ggplot(dfTrain,aes(Attrition,YearsSinceLastPromotion,fill=Attrition))+geom_violin()
ggplot(dfTrain,aes(dfTrain$TotalWorkingYears,data$YearsAtCompany, color=Attrition))+geom_point()
#boxplot between monthly income and attrition
ggplot(dfTrain,aes(Attrition,Overtime,fill=Attrition))+geom_boxplot()
#boxplot between monthly income and attrition
ggplot(dfTrain,aes(Attrition,overtime,fill=Attrition))+geom_boxplot()
#boxplot between monthly income and attrition
ggplot(dfTrain,aes(Attrition, dfTrain$OverTime ,fill=Attrition))+geom_boxplot()
#boxplot between monthly income and attrition
ggplot(dfTrain,aes(Attrition, dfTrain$Age ,fill=Attrition))+geom_boxplot()
gg4 <- ggplot(training, aes(x=Attrition, y=Age, color = Attrition)) +
geom_boxplot() +
labs(subtitle="Age and Attrition",
y="Age",
x="Attrition",
title="Box Plot - Age & Attrition")
plot(gg4)
ggplot(dfTrain,aes(x=YearsAtCompany,y=Age, color=Attrition))+geom_point()
ggplot(dfTrain, aes(x=IBU, y=ABV, color=IBU)) +
geom_point(size=1.3, na.rm=TRUE) +
geom_smooth(method=lm, na.rm=TRUE, se=FALSE, color="brown") +
labs(title="Years at company and Age", x="Years at Company", y="Age of Employee") +
theme(plot.title = element_text(hjust=0.5), legend.position="none") +
scale_color_gradient(low = "#ffbf00", high = "brown")
ggplot(dfTrain, aes(x=YearsAtCompany, y=Age, color=IBU)) +
geom_point(size=1.3, na.rm=TRUE) +
geom_smooth(method=lm, na.rm=TRUE, se=FALSE, color="brown") +
labs(title="Years at company and Age", x="Years at Company", y="Age of Employee") +
theme(plot.title = element_text(hjust=0.5), legend.position="none") +
scale_color_gradient(low = "#ffbf00", high = "brown")
ggplot(dfTrain, aes(x=YearsAtCompany, y=Age, color=Attrition)) +
geom_point(size=1.3, na.rm=TRUE) +
geom_smooth(method=lm, na.rm=TRUE, se=FALSE, color="brown") +
labs(title="Years at company and Age", x="Years at Company", y="Age of Employee") +
theme(plot.title = element_text(hjust=0.5), legend.position="none") +
scale_color_gradient(low = "#ffbf00", high = "brown")
ggplot(dfTrain, aes(x=YearsAtCompany, y=Age, color=Age)) +
geom_point(size=1.3, na.rm=TRUE) +
geom_smooth(method=lm, na.rm=TRUE, se=FALSE, color="brown") +
labs(title="Years at company and Age", x="Years at Company", y="Age of Employee") +
theme(plot.title = element_text(hjust=0.5), legend.position="none") +
scale_color_gradient(low = "#ffbf00", high = "brown")
ggplot(dfTrain, aes(x=YearsAtCompany, y=Age, color=Age)) +
geom_point(size=1.3, na.rm=TRUE) +
geom_smooth(method=lm, na.rm=TRUE, se=FALSE, color="blue") +
labs(title="Years at company and Age", x="Years at Company", y="Age of Employee") +
theme(plot.title = element_text(hjust=0.5), legend.position="none") +
scale_color_gradient(low = "#ffbf00", high = "blue")
ggplot(dfTrain, aes(x=YearsAtCompany, y=Age, color=attrition)) +
geom_point(size=1.3, na.rm=TRUE) +
geom_smooth(method=lm, na.rm=TRUE, se=FALSE, color="blue") +
labs(title="Years at company and Age", x="Years at Company", y="Age of Employee") +
theme(plot.title = element_text(hjust=0.5), legend.position="none") +
scale_color_gradient(low = "#ffbf00", high = "blue")
ggplot(dfTrain, aes(x=YearsAtCompany, y=Age, color=dfTrain$attrition)) +
geom_point(size=1.3, na.rm=TRUE) +
geom_smooth(method=lm, na.rm=TRUE, se=FALSE, color="blue") +
labs(title="Years at company and Age", x="Years at Company", y="Age of Employee") +
theme(plot.title = element_text(hjust=0.5), legend.position="none") +
scale_color_gradient(low = "#ffbf00", high = "blue")
ggplot(dfTrain, aes(x=YearsAtCompany, y=Age, color=YearsAtCompany)) +
geom_point(size=1.3, na.rm=TRUE) +
geom_smooth(method=lm, na.rm=TRUE, se=FALSE, color="blue") +
labs(title="Years at company and Age", x="Years at Company", y="Age of Employee") +
theme(plot.title = element_text(hjust=0.5), legend.position="none") +
scale_color_gradient(low = "#ffbf00", high = "blue")
ggplot(dfTrain, aes(x=YearsAtCompany, y=Age, color=YearsAtCompany)) +
geom_point(size=1.3, na.rm=TRUE) +
# geom_smooth(method=lm, na.rm=TRUE, se=FALSE, color="blue") +
labs(title="Years at company and Age", x="Years at Company", y="Age of Employee") +
theme(plot.title = element_text(hjust=0.5), legend.position="none") +
scale_color_gradient(low = "#ffbf00", high = "blue")
#boxplot between monthly income and attrition
ggplot(dfTrain,aes(Attrition,YearsSinceLastPromotion,fill=Attrition))+geom_violin()
gg5 <- ggplot(dfTrain, aes(y=YearsSinceLastPromotion, x=Attrition, color = Attrition)) +
geom_boxplot() +
labs(subtitle="Years Since Last promotion and Attrition",
y="Years Since last promotion",
x="Attrition",
title="Box Plot")
plot(gg5)
gg5 <- ggplot(dfTrain, aes(x=YearsSinceLastPromotion, y=Attrition, color = Attrition)) +
geom_boxplot() +
labs(subtitle="Years Since Last promotion and Attrition",
x="Years Since last promotion",
y="Attrition",
title="Box Plot")
plot(gg5)
plot(gg6)
gg6 <- ggplot(dfTrain, aes(y=YearsSinceLastPromotion, x=Attrition, color = Attrition)) +
geom_boxplot() +
labs(subtitle="Years Since Last promotion and Attrition",
y="Years Since last promotion",
x="Attrition",
title="Box Plot")
plot(gg6)
gg7 <- ggplot(dfTrain, aes(y=MaritalStatus, x=Attrition, color = Attrition)) +
geom_boxplot() +
labs(subtitle="Marital Status and Attrition",
y="Marital Status",
x="Attrition",
title="Box Plot")
plot(gg7)
gg7 <- ggplot(dfTrain, aes(x=MaritalStatus, y=Attrition, color = Attrition)) +
geom_boxplot() +
labs(subtitle="Marital Status and Attrition",
y="Attrition",
x="Marital Status",
title="Box Plot")
plot(gg7)
gg7 <- ggplot(dfTrain, aes(x=MaritalStatus, y=Attrition, color = Attrition)) +
geom_jitter() +
labs(subtitle="Marital Status and Attrition",
y="Attrition",
x="Marital Status",
title="Box Plot")
plot(gg7)
head(dfTrain)
dim(dfTrain)
dim(dfVal)
write.csv(dfVal, file="dfVal.csv")
setwd("C:/Anands/DS_HW/GIT/ExampleProject/MSDS6306-CaseStudy2/DataFiles")
setwd("C:/Anands/DS_HW/GIT/ExampleProject/MSDS6306-CaseStudy2/DataFiles")
knitr::root.dir
setwd("C:/Anands/DS_HW/GIT/ExampleProject/MSDS6306-CaseStudy2/DataFiles")
#dfval <- read.csv("CaseStudy2Validation.csv")
training <- read.csv("CaseStudy2-data.csv")
#Exploratory data Analysis
# Split training and test sets for our analysis and model
train_perc = .75
train_indices = sample(seq(1,samplesize_attrition,length = samplesize_attrition),train_perc*samplesize_attrition)
dfTrain = training[train_indices,]
dfVal  = training[-train_indices,]
#Write CSV file to destination folder
write.csv(dfTrain, file ="dfTrain.csv")
write.csv(dfVal, file="dfVal.csv")
str(dfTrain)
summary(dfTrain)
dim(dfVal)
dim(dfTrain)
# Removing columns which do not vary as well as the random column
dfTrain$Over18 <- NULL
dfTrain$EmployeeCount <- NULL
dfTrain$StandardHours <- NULL
dfTrain$EmployeeNumber <- NULL
dfTrain$Rand <- NULL
# Convert foloowing columns as factors
dfTrain$Education <- as.factor(dfTrain$Education)
dfTrain$EnvironmentSatisfaction <- as.factor(dfTrain$EnvironmentSatisfaction)
dfTrain$JobInvolvement <- as.factor(dfTrain$JobInvolvement)
dfTrain$JobLevel <- as.factor(dfTrain$JobLevel)
dfTrain$JobSatisfaction <- as.factor(dfTrain$JobSatisfaction)
dfTrain$PerformanceRating <- as.factor(dfTrain$PerformanceRating)
dfTrain$RelationshipSatisfaction <- as.factor(dfTrain$RelationshipSatisfaction)
dfTrain$StockOptionLevel <- as.factor(dfTrain$StockOptionLevel)
dfTrain$TrainingTimesLastYear <- as.factor(dfTrain$TrainingTimesLastYear)
dfTrain$WorkLifeBalance <- as.factor(dfTrain$WorkLifeBalance)
# finally assigning the data to a data frame which has clean data for model.
corr_matrix=cor(dfTrain[sapply(dfTrain, is.numeric)])
#This function searches through a correlation matrix and returns a vector of
#integers corresponding to columns to remove to reduce pair-wise correlations.
highCorr = findCorrelation(corr_matrix, cutoff=0.65)
highCorr
#10 11 and 12
#Correlation diagram
pairs (~ MonthlyIncome + MonthlyRate + HourlyRate ,
data = dfTrain ,col=4)
pairs (~EducationField + EnvironmentSatisfaction #+ Gender,
,data = dfTrain ,col=6)
# This optimizes the training model
trainc <- trainControl(method="repeatedcv", number=5, repeats=5)
#Creates a model for the learning machine which can be used for predictions on new data.
fitknn=train(Attrition~., dfTrain, method="knn", trControl=trainc)
impvars=varImp(fitknn, scale=FALSE)
impvars
# Load necessary libraries
#install.packages("caret")
#install.packages(mlr)
library(mlr)
library(caret)
library(ggplot2)
library(dplyr)
library(knitr)
library(kableExtra)
library(plyr)
library(tidyverse)
dfcols <- data.frame(dfTrian$YearsAtCompany,
dfTrian$TotalWorkingYears,
dfTrian$YearsInCurrentRole,
dfTrian$YearsWithCurrManager,
dfTrian$OverTime,
dfTrian$MonthlyIncome,
dfTrian$JobLevel,
dfTrian$MaritalStatus,
dfTrian$Age,
dfTrian$StockOptionLevel)
dim(dfTrain)
dfcols <- data.frame(dfTrian$YearsAtCompany,dfTrian$TotalWorkingYears,
dfTrian$YearsInCurrentRole,
dfTrian$YearsWithCurrManager,
dfTrian$OverTime,
dfTrian$MonthlyIncome,
dfTrian$JobLevel,
dfTrian$MaritalStatus,
dfTrian$Age,
dfTrian$StockOptionLevel, dfTrain$Attrition)
dfcols <- data.frame(dfTrain$YearsAtCompany,dfTrain$TotalWorkingYears,
dfTrain$YearsInCurrentRole,
dfTrain$YearsWithCurrManager,
dfTrain$OverTime,
dfTrain$MonthlyIncome,
dfTrain$JobLevel,
dfTrain$MaritalStatus,
dfTrain$Age,
dfTrain$StockOptionLevel, dfTrain$Attrition)
head(dfTrain)
head(dfVal)
kval <- 5
# Appropriate model after getting the results
results = class::knn(dfTrain[,3,15,18,19,22,26.27,30,31,33],
dfVal[,3,15,18,19,22,26.27,30,31,33],
dfTrain$Attrition, k=kval)
kval <- 5
# Appropriate model after getting the results
results = class::knn(dfTrain[,3,15,18,19,22,26,27,30,31,33],
dfVal[,3,15,18,19,22,26,27,30,31,33],
dfTrain$Attrition, k=kval)
kval <- 5
# Appropriate model after getting the results
results = class::knn(dfTrain[,c(3,15,18,19,22,26,27,30,31,33)],
dfVal[,c(3,15,18,19,22,26,27,30,31,33)],
dfTrain$Attrition, k=kval)
barplot(left,main="No.of Employees who left", ylab="No of employees",xlab = "left",col = c("lightblue", "mistyrose"))
barplot(dfTrain,main="No.of Employees who left", ylab="No of employees",xlab = "left",col = c("lightblue", "mistyrose"))
data_rf=dfTrain[, -c(3,5,7,8,10,13,14,16,29)]
data_ts=dfVal[, -c(3,5,7,8,10,13,14,16,29)]
# Appropriate model after getting the results
results = class::knn(data_rf, data_ts, dfTrain$Attrition, k=kval)
head(dfVal)
dfVal[,37]
head(data_rf)
head(dfVal,2)
data_rf=dfTrain[, -c(3,15,18,19,22,26,27,30,31,33)]
data_ts=dfVal[, -c(3,17,20,21,25,30,31,34,35,37)]
# Appropriate model after getting the results
results = class::knn(data_rf, data_ts, dfTrain$Attrition, k=kval)
dim(data_ts)
data_rf=dfTrain[, c(3,15,18,19,22,26,27,30,31,33)]
data_rf=dfTrain[, c(3,15,18,19,22,26,27,30,31,33)]
head(dfTrain)
data_rf=dfTrain[, c(2,15,18,19,22,26,27,30,31,32)]
head(data_rf)
data_rf=dfTrain[, c(2,14,17,18,21,25,26,29,30,32)]
head(data_rf)
data_ts=dfVal[, c(2,16,19,20,24,29,30,33,34,36)]
# Appropriate model after getting the results
results = class::knn(data_rf, data_ts, dfTrain$Attrition, k=kval)
data_rf=dfTrain[, c(2,14,17,18,21,25,26,29,30,32)]  %>% droplevels()
data_ts=dfVal[, c(2,16,19,20,24,29,30,33,34,36)] %>% droplevels()
# Appropriate model after getting the results
results = class::knn(data_rf, data_ts, dfTrain$Attrition, k=kval)
# Appropriate model after getting the results
results = class::knn(data_rf, data_ts, Attrition, k=kval)
dfTrain=dfTrain[, c(2,14,17,18,21,25,26,29,30,32)] %>% droplevels()
dfVal=dfVal[, c(2,16,19,20,24,29,30,33,34,36)] %>% droplevels()
# Appropriate model after getting the results
results = class::knn(dfTrain, dfVal, dfVal$Attrition, k=kval)
head(dfTrain)
dim(data_ts)
head(dfVal)
dfTrain=dfTrain[, c(2,3,14,17,18,21,25,26,29,30,32)] %>% droplevels()
setwd("C:/Anands/DS_HW/GIT/ExampleProject/MSDS6306-CaseStudy2/DataFiles")
#dfval <- read.csv("CaseStudy2Validation.csv")
training <- read.csv("CaseStudy2-data.csv")
#Exploratory data Analysis
# Split training and test sets for our analysis and model
train_perc = .75
train_indices = sample(seq(1,samplesize_attrition,length = samplesize_attrition),train_perc*samplesize_attrition)
dfTrain = training[train_indices,]
dfVal  = training[-train_indices,]
#Write CSV file to destination folder
write.csv(dfTrain, file ="dfTrain.csv")
write.csv(dfVal, file="dfVal.csv")
str(dfTrain)
summary(dfTrain)
dim(dfVal)
dim(dfTrain)
# Removing columns which do not vary as well as the random column
dfTrain$Over18 <- NULL
dfTrain$EmployeeCount <- NULL
dfTrain$StandardHours <- NULL
dfTrain$EmployeeNumber <- NULL
dfTrain$Rand <- NULL
# Convert foloowing columns as factors
dfTrain$Education <- as.factor(dfTrain$Education)
dfTrain$EnvironmentSatisfaction <- as.factor(dfTrain$EnvironmentSatisfaction)
dfTrain$JobInvolvement <- as.factor(dfTrain$JobInvolvement)
dfTrain$JobLevel <- as.factor(dfTrain$JobLevel)
dfTrain$JobSatisfaction <- as.factor(dfTrain$JobSatisfaction)
dfTrain$PerformanceRating <- as.factor(dfTrain$PerformanceRating)
dfTrain$RelationshipSatisfaction <- as.factor(dfTrain$RelationshipSatisfaction)
dfTrain$StockOptionLevel <- as.factor(dfTrain$StockOptionLevel)
dfTrain$TrainingTimesLastYear <- as.factor(dfTrain$TrainingTimesLastYear)
dfTrain$WorkLifeBalance <- as.factor(dfTrain$WorkLifeBalance)
# finally assigning the data to a data frame which has clean data for model.
corr_matrix=cor(dfTrain[sapply(dfTrain, is.numeric)])
#This function searches through a correlation matrix and returns a vector of
#integers corresponding to columns to remove to reduce pair-wise correlations.
highCorr = findCorrelation(corr_matrix, cutoff=0.65)
highCorr
#10 11 and 12
#Correlation diagram
pairs (~ MonthlyIncome + MonthlyRate + HourlyRate ,
data = dfTrain ,col=4)
pairs (~EducationField + EnvironmentSatisfaction #+ Gender,
,data = dfTrain ,col=6)
# This optimizes the training model
trainc <- trainControl(method="repeatedcv", number=5, repeats=5)
#Creates a model for the learning machine which can be used for predictions on new data.
fitknn=train(Attrition~., dfTrain, method="knn", trControl=trainc)
impvars=varImp(fitknn, scale=FALSE)
impvars
head(dfTrain)
kval <- 5
dftr=dfTrain[, c(2,3,14,17,18,21,25,26,29,30,32)] %>% droplevels()
dfts=dfVal[, c(2,3,16,19,20,24,29,30,33,34,36)] %>% droplevels()
# Appropriate model after getting the results
results = class::knn(dftr[,-c(3)], dfts[,-c(3)], dftr$Attrition, k=kval)
kval <- 5
dftr <- data.frame(dfTrain[, c(2,3,14,17,18,21,25,26,29,30,32)]) %>% droplevels()
dfts <- data.frame(dfVal[, c(2,3,16,19,20,24,29,30,33,34,36)]) %>% droplevels()
# Appropriate model after getting the results
results = class::knn(dftr[,-c(3)], dfts[,-c(3)], dftr$Attrition, k=kval)
# Appropriate model after getting the results
results = class::knn(dftr[,-c(2)], dfts[,-c(2)], dftr$Attrition, k=kval)
head(dftr)
# Appropriate model after getting the results
results = class::knn(dftr[,c(1,3,4,5,6,7,8,9,10,11)], dfts[,c(1,3,4,5,6,7,8,9,10,11)], dftr$Attrition, k=kval)
summary(dftr)
str(dftr)
dftr$JobLevel <- as.integer(dftr$JobLevel)
dftr$MaritalStatus <- as.integer(dftr$MaritalStatus)
dftr$OverTime <- as.integer(dftr$OverTime)
dftr$StockOptionLevel <- as.integer(dftr$StockOptionLevel)
dfts$JobLevel <- as.integer(dftr$JobLevel)
dftr$JobLevel <- as.integer(dftr$JobLevel)
dftr$MaritalStatus <- as.integer(dftr$MaritalStatus)
dftr$OverTime <- as.integer(dftr$OverTime)
dftr$StockOptionLevel <- as.integer(dftr$StockOptionLevel)
dfts$JobLevel <- as.integer(dfts$JobLevel)
dfts$MaritalStatus <- as.integer(dfts$MaritalStatus)
dfts$OverTime <- as.integer(dfts$OverTime)
dfts$StockOptionLevel <- as.integer(dfts$StockOptionLevel)
# Appropriate model after getting the results
results = class::knn(dftr[,c(1,3,4,5,6,7,8,9,10,11)], dfts[,c(1,3,4,5,6,7,8,9,10,11)], dftr$Attrition, k=kval)
# Predict the data thus trained with test set
dfts$predictedAttrition <- results
table(dfts$Attrition,dfts$predictedAttrition)
#Confushion Matrix creation
cm <- caret::confusionMatrix(table(dfts$Attrition,dfts$predictedAttrition))
head(dfts)
cm
model_accuracy_knn=sum(dfts$predictedAttrition == dfts$Attrition)/nrow(dfts)
model_accuracy_knn
dfts
head(dfTrain)
dftr <- data.frame(dfTrain[, c(1,2,3,14,17,18,21,25,26,29,30,32)]) %>% droplevels()
head(dftr)
dfts <- data.frame(dfVal[, c(1,2,3,16,19,20,24,29,30,33,34,36)]) %>% droplevels()
dftr$JobLevel <- as.integer(dftr$JobLevel)
dftr$MaritalStatus <- as.integer(dftr$MaritalStatus)
dftr$OverTime <- as.integer(dftr$OverTime)
dftr$StockOptionLevel <- as.integer(dftr$StockOptionLevel)
dfts$JobLevel <- as.integer(dfts$JobLevel)
dfts$MaritalStatus <- as.integer(dfts$MaritalStatus)
dfts$OverTime <- as.integer(dfts$OverTime)
dfts$StockOptionLevel <- as.integer(dfts$StockOptionLevel)
head(dftr)
# Appropriate model after getting the results
results = class::knn(dftr[,c(2,4,5,6,7,8,9,10,11,12)], dfts[,c(2,4,5,6,7,8,9,10,11,12)], dftr$Attrition, k=kval)
# Predict the data thus trained with test set
dfts$predictedAttrition <- results
table(dfts$Attrition,dfts$predictedAttrition)
#Confushion Matrix creation
cm <- caret::confusionMatrix(table(dfts$Attrition,dfts$predictedAttrition))
cm
model_accuracy_knn
write.csv(dfts$, file="dfVal.csv")
write.csv(dfts$ID,dfts$predictedAttrition, file="dfVal.csv")
dfPreds <- data.frame(dfts$ID,dfts$predictedAttrition)
write.csv(dfpred, file="dfPreds.csv")
write.csv(dfPreds, file="dfPreds.csv")
setwd("C:/Anands/DS_HW/GIT/ExampleProject/MSDS6306-CaseStudy2/DataFiles")
training <- read.csv("CaseStudy2-data.csv")
#Exploratory data Analysis
# Split training and test sets for our analysis and model
train_perc = .75
train_indices = sample(seq(1,samplesize_attrition,length = samplesize_attrition),train_perc*samplesize_attrition)
dfTrain = training[train_indices,]
dfVal  = training[-train_indices,]
#Write CSV file to destination folder
write.csv(dfTrain, file ="dfTrain.csv")
write.csv(dfVal, file="dfVal.csv")
str(dfTrain)
summary(dfTrain)
dim(dfVal)
dim(dfTrain)
# Removing columns which do not vary as well as the random column
dfTrain$Over18 <- NULL
dfTrain$EmployeeCount <- NULL
dfTrain$StandardHours <- NULL
dfTrain$EmployeeNumber <- NULL
dfTrain$Rand <- NULL
# Convert foloowing columns as factors
dfTrain$Education <- as.factor(dfTrain$Education)
dfTrain$EnvironmentSatisfaction <- as.factor(dfTrain$EnvironmentSatisfaction)
dfTrain$JobInvolvement <- as.factor(dfTrain$JobInvolvement)
dfTrain$JobLevel <- as.factor(dfTrain$JobLevel)
dfTrain$JobSatisfaction <- as.factor(dfTrain$JobSatisfaction)
dfTrain$PerformanceRating <- as.factor(dfTrain$PerformanceRating)
dfTrain$RelationshipSatisfaction <- as.factor(dfTrain$RelationshipSatisfaction)
dfTrain$StockOptionLevel <- as.factor(dfTrain$StockOptionLevel)
dfTrain$TrainingTimesLastYear <- as.factor(dfTrain$TrainingTimesLastYear)
dfTrain$WorkLifeBalance <- as.factor(dfTrain$WorkLifeBalance)
# finally assigning the data to a data frame which has clean data for model.
corr_matrix=cor(dfTrain[sapply(dfTrain, is.numeric)])
#This function searches through a correlation matrix and returns a vector of
#integers corresponding to columns to remove to reduce pair-wise correlations.
highCorr = findCorrelation(corr_matrix, cutoff=0.65)
highCorr
#10 11 and 12
#Correlation diagram
pairs (~ MonthlyIncome + MonthlyRate + HourlyRate ,
data = dfTrain ,col=4)
pairs (~EducationField + EnvironmentSatisfaction #+ Gender,
,data = dfTrain ,col=6)
# This optimizes the training model
trainc <- trainControl(method="repeatedcv", number=5, repeats=5)
#Creates a model for the learning machine which can be used for predictions on new data.
fitknn=train(Attrition~., dfTrain, method="knn", trControl=trainc)
impvars=varImp(fitknn, scale=FALSE)
impvars
# Split training and test sets for our analysis and model
samplesize_attrition = nrow(dfTrain)
# Split training and test sets for our analysis and model
samplesize_attrition = nrow(training)
#Using Pairs comparison to find correlation
pairs (~ MonthlyIncome + MonthlyRate + HourlyRate ,
data = dfTrain)
pairs (~Education +EnvironmentSatisfaction + Gender,
data = dfTrain)
#The Correlation are negligible as they are class field
# Monthly income and work life balance
gg1 <- ggplot(dfTrain, aes(x=dfTrain$WorkLifeBalance, y=training$MonthlyIncome, color = Attrition)) +
geom_point() +
labs(subtitle="Income vs Work Life Balance",
y="Income",
x="WorkLife Balance",
title="Scatterplot")
plot(gg1)
plot(gg1)
gg1 <- ggplot(dfTrain, aes(x=dfTrain$WorkLifeBalance,                                     y=training$MonthlyIncome, color = Attrition)) +
geom_point() +
labs(subtitle="Income vs Work Life Balance",
y="Income",
x="WorkLife Balance",
title="Scatterplot")
plot(gg1)
gg2 <- ggplot(dfTrain, aes(x=dfTrain$Education, y=dfTrain$Department, color = Attrition)) +
geom_point() +
labs(subtitle="Education and Department",
y="Department",
x="Education",
title="Scatterplot")
plot(gg2)
gg1 <- ggplot(dfTrain, aes(x=dfTrain$WorkLifeBalance,                                     y=dfTrain$MonthlyIncome, color = Attrition)) +
geom_point() +
labs(subtitle="Income vs Work Life Balance",
y="Income",
x="WorkLife Balance",
title="Scatterplot")
plot(gg1)
gg2 <- ggplot(dfTrain, aes(x=Education, y=Department, color = Attrition)) +
geom_point() +
labs(subtitle="Education and Department",
y="Department",
x="Education",
title="Scatterplot")
plot(gg2)
